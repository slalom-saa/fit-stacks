¾
eC:\Source\Stacks\Core\test\Slalom.Stacks.ConsoleClient\Application\Catalog\Products\Add\AddProduct.cs
	namespace 	
Slalom
 
. 
Stacks 
. 
ConsoleClient %
.% &
Application& 1
.1 2
Catalog2 9
.9 :
Products: B
.B C
AddC F
{ 
[		 
Request		 
(		 
$str		 !
)		! "
]		" #
public

 

class

 
SendNotification

 !
{ 
public 
string 
Email 
{ 
get !
;! "
}# $
public 
string 
Message 
{ 
get  #
;# $
}% &
public 
SendNotification 
(  
string  &
email' ,
,, -
string. 4
message5 <
)< =
{ 	
this 
. 
Email 
= 
email 
; 
this 
. 
Message 
= 
message "
;" #
} 	
} 
[ 
EndPoint 
( 
$str $
)$ %
]% &
public 

class 

AddProduct 
: 
EndPoint &
<& '
AddProductCommand' 8
>8 9
{ 
public 
override 
async 
Task "
ReceiveAsync# /
(/ 0
AddProductCommand0 A
commandB I
)I J
{ 	
var   
target   
=   
new   
Product   $
(  $ %
command  % ,
.  , -
Name  - 1
,  1 2
command  3 :
.  : ;
Description  ; F
)  F G
;  G H
await"" 
this"" 
."" 
Domain"" 
."" 
Add"" !
(""! "
target""" (
)""( )
;"") *
this&& 
.&& 
AddRaisedEvent&& 
(&&  
new&&  #
ProductAdded&&$ 0
(&&0 1
target&&1 7
.&&7 8
Name&&8 <
,&&< =
target&&> D
.&&D E
Description&&E P
)&&P Q
)&&Q R
;&&R S
}'' 	
}(( 
}<< Õ

lC:\Source\Stacks\Core\test\Slalom.Stacks.ConsoleClient\Application\Catalog\Products\Add\AddProductCommand.cs
	namespace 	
Slalom
 
. 
Stacks 
. 
ConsoleClient %
.% &
Application& 1
.1 2
Catalog2 9
.9 :
Products: B
.B C
AddC F
{ 
[

 
Request

 
(

 
$str

 #
)

# $
]

$ %
public 

class 
AddProductCommand "
{ 
public 
AddProductCommand  
(  !
string! '
name( ,
,, -
string. 4
description5 @
)@ A
{ 	
this 
. 
Name 
= 
name 
; 
this 
. 
Description 
= 
description *
;* +
} 	
[ 	
NotNull	 
( 
$str $
)$ %
]% &
public 
string 
Name 
{ 
get  
;  !
}" #
public## 
string## 
Description## !
{##" #
get##$ '
;##' (
}##) *
}$$ 
}%% ¢	
gC:\Source\Stacks\Core\test\Slalom.Stacks.ConsoleClient\Application\Catalog\Products\Add\ProductAdded.cs
	namespace 	
Slalom
 
. 
Stacks 
. 
ConsoleClient %
.% &
Application& 1
.1 2
Catalog2 9
.9 :
Products: B
.B C
AddC F
{ 
public

 

class

 
ProductAdded

 
:

 
Event

  %
{ 
public 
ProductAdded 
( 
string "
name# '
,' (
string) /
description0 ;
); <
{ 	
this 
. 
Name 
= 
name 
; 
this 
. 
Description 
= 
description *
;* +
} 	
public 
string 
Description !
{" #
get$ '
;' (
}) *
public!! 
string!! 
Name!! 
{!! 
get!!  
;!!  !
}!!" #
}"" 
}## Ô

tC:\Source\Stacks\Core\test\Slalom.Stacks.ConsoleClient\Application\Catalog\Products\Add\Rules\name_must_be_unique.cs
	namespace 	
Slalom
 
. 
Stacks 
. 
ConsoleClient %
.% &
Application& 1
.1 2
Catalog2 9
.9 :
Products: B
.B C
AddC F
.F G
RulesG L
{ 
public 

class 
name_must_be_unique $
:% &
BusinessRule' 3
<3 4
AddProductCommand4 E
>E F
{ 
public 
override 
ValidationError '
Validate( 0
(0 1
AddProductCommand1 B
instanceC K
)K L
{ 	
return 
null 
; 
} 	
} 
public 

class 
user_is_employee !
:" #
SecurityRule$ 0
<0 1
AddProductCommand1 B
>B C
{ 
public 
override 
ValidationError '
Validate( 0
(0 1
AddProductCommand1 B
instanceC K
)K L
{ 	
return 
null 
; 
} 	
} 
} ñ
jC:\Source\Stacks\Core\test\Slalom.Stacks.ConsoleClient\Application\Shipping\Products\Stock\StockProduct.cs
	namespace 	
Slalom
 
. 
Stacks 
. 
ConsoleClient %
.% &
Application& 1
.1 2
Shipping2 :
.: ;
Products; C
.C D
StockD I
{ 
[		 
EndPoint		 
(		 
$str		 '
)		' (
]		( )
public

 

class

 
StockProduct

 
:

 
EndPoint

  (
<

( )
StockProductCommand

) <
,

< =
StockProductEvent

> O
>

O P
{ 
public 
override 
async 
Task "
<" #
StockProductEvent# 4
>4 5
ReceiveAsync6 B
(B C
StockProductCommandC V
commandW ^
)^ _
{ 	
var 
target 
= 
( 
await 
this  $
.$ %
Domain% +
.+ ,
Find, 0
<0 1
	StockItem1 :
>: ;
(; <
e< =
=>> @
eA B
.B C
	ProductIdC L
==M O
commandP W
.W X
	ProductIdX a
)a b
)b c
.c d
FirstOrDefaultd r
(r s
)s t
;t u
if 
( 
target 
== 
null 
) 
{ 
target 
= 
new 
	StockItem &
(& '
command' .
.. /
	ProductId/ 8
)8 9
;9 :
} 
target 
. 
Add 
( 
command 
. 
Quantity '
)' (
;( )
await 
this 
. 
Domain 
. 
Update $
($ %
target% +
)+ ,
;, -
return 
new 
StockProductEvent (
(( )
target) /
./ 0
	ProductId0 9
,9 :
target; A
.A B
QuantityB J
)J K
;K L
} 	
} 
} Ø

qC:\Source\Stacks\Core\test\Slalom.Stacks.ConsoleClient\Application\Shipping\Products\Stock\StockProductCommand.cs
	namespace 	
Slalom
 
. 
Stacks 
. 
ConsoleClient %
.% &
Application& 1
.1 2
Shipping2 :
.: ;
Products; C
.C D
StockD I
{ 
public 

class 
StockProductCommand $
{ 
public		 
StockProductCommand		 "
(		" #
string		# )
	productId		* 3
,		3 4
int		5 8
quantity		9 A
)		A B
{

 	
this 
. 
	ProductId 
= 
	productId &
;& '
this 
. 
Quantity 
= 
quantity $
;$ %
} 	
[ 	
NotNull	 
] 
public 
string 
	ProductId 
{  !
get" %
;% &
}' (
[ 	
GreaterThan	 
( 
$num 
, 
$str F
)F G
]G H
public 
int 
Quantity 
{ 
get !
;! "
}# $
} 
} ¹	
oC:\Source\Stacks\Core\test\Slalom.Stacks.ConsoleClient\Application\Shipping\Products\Stock\StockProductEvent.cs
	namespace 	
Slalom
 
. 
Stacks 
. 
ConsoleClient %
.% &
Application& 1
.1 2
Shipping2 :
.: ;
Products; C
.C D
StockD I
{ 
public 

class 
StockProductEvent "
:# $
Event% *
{ 
public		 
StockProductEvent		  
(		  !
string		! '
	productId		( 1
,		1 2
int		3 6
quantity		7 ?
)		? @
{

 	
this 
. 
	ProductId 
= 
	productId &
;& '
this 
. 
Quantity 
= 
quantity $
;$ %
} 	
public 
string 
	ProductId 
{  !
get" %
;% &
}' (
public 
int 
Quantity 
{ 
get !
;! "
}# $
} 
} û
QC:\Source\Stacks\Core\test\Slalom.Stacks.ConsoleClient\Domain\Products\Product.cs
	namespace 	
Slalom
 
. 
Stacks 
. 
ConsoleClient %
.% &
Domain& ,
., -
Products- 5
{ 
public 

class 
Product 
: 
AggregateRoot (
{ 
public		 
ProductName		 
Name		 
{		  !
get		" %
;		% &
set		' *
;		* +
}		, -
public 
ProductDescription !
Description" -
{. /
get0 3
;3 4
set5 8
;8 9
}: ;
public 
Product 
( 
string 
name "
," #
string$ *
description+ 6
)6 7
{ 	
this 
. 
Name 
= 
name 
; 
this 
. 
Description 
= 
description *
;* +
} 	
public 
ProductState 
State !
{" #
get$ '
;' (
private) 0
set1 4
;4 5
}6 7
public 
void 
Publish 
( 
) 
{ 	
if 
( 
this 
. 
State 
!= 
ProductState *
.* +
Draft+ 0
)0 1
{ 
throw 
new 
ValidationException -
(- .
$str. X
)X Y
;Y Z
} 
this 
. 
State 
= 
ProductState %
.% &
	Published& /
;/ 0
} 	
} 
public 

enum 
ProductState 
{   
None!! 
,!! 
Draft"" 
,"" 
	Published## 
,## 
Retired$$ 
}%% 
}&& 
\C:\Source\Stacks\Core\test\Slalom.Stacks.ConsoleClient\Domain\Products\ProductDescription.cs
	namespace 	
Slalom
 
. 
Stacks 
. 
ConsoleClient %
.% &
Domain& ,
., -
Products- 5
{ 
public 

class 
ProductDescription #
:$ %
	ConceptAs& /
</ 0
string0 6
>6 7
{		 
public

 
static

 
implicit

 
operator

 '
ProductDescription

( :
(

: ;
string

; A
value

B G
)

G H
{ 	
var 
target 
= 
new 
ProductDescription /
{0 1
Value2 7
=8 9
value: ?
}@ A
;A B
target 
. 
EnsureValid 
( 
)  
;  !
return 
target 
; 
} 	
public 
override 
IEnumerable #
<# $
ValidationError$ 3
>3 4
Validate5 =
(= >
)> ?
{ 	
if 
( 
this 
. 
Value 
? 
. 
Length "
># $
$num% (
)( )
{ 
yield 
return 
$str V
;V W
} 
} 	
} 
} 
UC:\Source\Stacks\Core\test\Slalom.Stacks.ConsoleClient\Domain\Products\ProductName.cs
	namespace 	
Slalom
 
. 
Stacks 
. 
ConsoleClient %
.% &
Domain& ,
., -
Products- 5
{ 
public 

class 
ProductName 
: 
	ConceptAs (
<( )
string) /
>/ 0
{		 
public

 
static

 
implicit

 
operator

 '
ProductName

( 3
(

3 4
string

4 :
value

; @
)

@ A
{ 	
var 
target 
= 
new 
ProductName (
{) *
Value+ 0
=1 2
value3 8
}9 :
;: ;
target 
. 
EnsureValid 
( 
)  
;  !
return 
target 
; 
} 	
public 
override 
IEnumerable #
<# $
ValidationError$ 3
>3 4
Validate5 =
(= >
)> ?
{ 	
if 
( 
this 
. 
Value 
? 
. 
Length "
<# $
$num% &
||' )
this* .
.. /
Value/ 4
?4 5
.5 6
Length6 <
>= >
$num? B
)B C
{ 
yield 
return 
$str S
;S T
} 
} 	
} 
} Ç
SC:\Source\Stacks\Core\test\Slalom.Stacks.ConsoleClient\Domain\Shipping\StockItem.cs
	namespace		 	
Slalom		
 
.		 
Stacks		 
.		 
ConsoleClient		 %
.		% &
Domain		& ,
.		, -
Shipping		- 5
{

 
public 

class 
	StockItem 
: 
AggregateRoot *
{ 
public 
string 
	ProductId 
{  !
get" %
;% &
}' (
public 
int 
Quantity 
{ 
get !
;! "
private# *
set+ .
;. /
}0 1
public 
	StockItem 
( 
string 
	productId  )
)) *
{ 	
this 
. 
	ProductId 
= 
	productId &
;& '
} 	
public 
void 
Add 
( 
int 
quantity $
)$ %
{ 	
if 
( 
quantity 
< 
$num 
) 
{ 
throw 
new 
ValidationException -
(- .
$str. \
)\ ]
;] ^
} 
this 
. 
Quantity 
+= 
quantity %
;% &
} 	
public   
void   
Remove   
(   
int   
quantity   '
)  ' (
{!! 	
if"" 
("" 
quantity"" 
<"" 
$num"" 
)"" 
{## 
throw$$ 
new$$ 
ValidationException$$ -
($$- .
$str$$. O
)$$O P
;$$P Q
}%% 
if&& 
(&& 
this&& 
.&& 
Quantity&& 
-&& 
quantity&&  (
<&&) *
$num&&+ ,
)&&, -
{'' 
throw(( 
new(( 
ValidationException(( -
(((- .
$str((. Y
)((Y Z
;((Z [
})) 
this++ 
.++ 
Quantity++ 
-=++ 
quantity++ %
;++% &
},, 	
}-- 
}.. é
AC:\Source\Stacks\Core\test\Slalom.Stacks.ConsoleClient\Program.cs
	namespace 	
Slalom
 
. 
Stacks 
. 
ConsoleClient %
{ 
[ 
EndPoint 
( 
$str $
,$ %
Version& -
=. /
$num0 1
,1 2
Tags3 7
=8 9
new: =
[= >
]> ?
{@ A
$strB H
}I J
)J K
]K L
public 

class 

AddProduct 
: 
EndPoint &
<& '
AddProductCommand' 8
>8 9
{ 
public 
override 
async 
Task "
ReceiveAsync# /
(/ 0
AddProductCommand0 A
commandB I
)I J
{ 	
var 
target 
= 
new 
Product $
($ %
command% ,
., -
Name- 1
,1 2
command3 :
.: ;
Description; F
)F G
;G H
await 
this 
. 
Domain 
. 
Add !
(! "
target" (
)( )
;) *
this"" 
."" 
AddRaisedEvent"" 
(""  
new""  #
ProductAdded""$ 0
(""0 1
target""1 7
.""7 8
Name""8 <
,""< =
target""> D
.""D E
Description""E P
)""P Q
)""Q R
;""R S
}## 	
}$$ 
[&& 
EndPoint&& 
(&& 
$str&& 
,&& 
Version&&  '
=&&( )
$num&&* +
)&&+ ,
]&&, -
public'' 

class'' 
Check2'' 
:'' 
EndPoint'' "
{(( 
})) 
internal++ 
class++ 
Program++ 
{,, 
private-- 
static-- 
void-- 
Main--  
(--  !
string--! '
[--' (
]--( )
args--* .
)--. /
{.. 	
try// 
{00 
using11 
(11 
var11 
stack11  
=11! "
new11# &
	TestStack11' 0
(110 1
)111 2
)112 3
{22 
stack33 
.33 
UseEndPoint33 %
<33% &
AddProductCommand33& 7
>337 8
(338 9
(339 :
a33: ;
,33; <
b33= >
)33> ?
=>33@ B
{44 
}55 
)55 
;55 
}66 
}88 
catch99 
(99 
	Exception99 
	exception99 &
)99& '
{:: 
Console;; 
.;; 
	WriteLine;; !
(;;! "
	exception;;" +
);;+ ,
;;;, -
}<< 
}== 	
}>> 
}??  
QC:\Source\Stacks\Core\test\Slalom.Stacks.ConsoleClient\Properties\AssemblyInfo.cs
[ 
assembly 	
:	 
!
AssemblyConfiguration  
(  !
$str! #
)# $
]$ %
[		 
assembly		 	
:			 

AssemblyCompany		 
(		 
$str		 
)		 
]		 
[

 
assembly

 	
:

	 

AssemblyProduct

 
(

 
$str

 8
)

8 9
]

9 :
[ 
assembly 	
:	 

AssemblyTrademark 
( 
$str 
)  
]  !
[ 
assembly 	
:	 


ComVisible 
( 
false 
) 
] 
[ 
assembly 	
:	 

Guid 
( 
$str 6
)6 7
]7 8