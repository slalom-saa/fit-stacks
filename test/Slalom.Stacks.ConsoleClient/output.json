{
  "definitions": {
    "addProductCommand": {
      "description": "Adds a product to the product catalog.",
      "properties": {
        "description": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "application": {
      "description": "Contains information about the application or API.",
      "properties": {
        "contact": {
          "description": "Contact information for the exposed API.",
          "properties": {
            "email": {
              "type": "string"
            },
            "name": {
              "type": "string"
            },
            "url": {
              "type": "string"
            }
          },
          "type": "object"
        },
        "description": {
          "type": "string"
        },
        "license": {
          "description": "License information for the exposed API.",
          "properties": {
            "name": {
              "type": "string"
            },
            "url": {
              "type": "string"
            }
          },
          "type": "object"
        },
        "termsOfService": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "version": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "contact": {
      "description": "Contact information for the exposed API.",
      "properties": {
        "email": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "url": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "dictionary`2": {
      "type": "object"
    },
    "eventEntry": {
      "description": "An entry of an event that has been raised.",
      "properties": {
        "applicationName": {
          "type": "string"
        },
        "body": {
          "type": "string"
        },
        "environmentName": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "messageType": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "requestId": {
          "type": "string"
        },
        "timeStamp": {
          "format": "date-time",
          "type": "string"
        }
      },
      "type": "object"
    },
    "externalDocs": {
      "description": "Allows referencing an external resource for extended documentation.",
      "properties": {
        "description": {
          "type": "string"
        },
        "url": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "getEventsRequest": {
      "description": "Message to get the events that have occurred within the service context.",
      "properties": {
        "end": {
          "format": "date-time",
          "type": "string"
        },
        "start": {
          "format": "date-time",
          "type": "string"
        }
      },
      "type": "object"
    },
    "getOpenApiRequest": {
      "type": "object"
    },
    "getRequestsRequest": {
      "description": "Message to get requests that have happened in the service context.",
      "properties": {
        "end": {
          "format": "date-time",
          "type": "string"
        },
        "start": {
          "format": "date-time",
          "type": "string"
        }
      },
      "type": "object"
    },
    "getResponsesRequest": {
      "description": "Message to get responses that have been provided in a service context.",
      "properties": {
        "end": {
          "format": "date-time",
          "type": "string"
        },
        "start": {
          "format": "date-time",
          "type": "string"
        }
      },
      "type": "object"
    },
    "license": {
      "description": "License information for the exposed API.",
      "properties": {
        "name": {
          "type": "string"
        },
        "url": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "openApiDocument": {
      "description": "This is the root document object for the API specification. It combines what previously was the Resource Listing and API Declaration (version 1.2 and earlier) together into one document.",
      "properties": {
        "definitions": {
          "type": "object"
        },
        "info": {
          "description": "Contains information about the application or API.",
          "properties": {
            "contact": {
              "description": "Contact information for the exposed API.",
              "properties": {
                "email": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                },
                "url": {
                  "type": "string"
                }
              },
              "type": "object"
            },
            "description": {
              "type": "string"
            },
            "license": {
              "description": "License information for the exposed API.",
              "properties": {
                "name": {
                  "type": "string"
                },
                "url": {
                  "type": "string"
                }
              },
              "type": "object"
            },
            "termsOfService": {
              "type": "string"
            },
            "title": {
              "type": "string"
            },
            "version": {
              "type": "string"
            }
          },
          "type": "object"
        },
        "paths": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "schemes": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "swagger": {
          "type": "string"
        },
        "tags": {
          "items": {
            "$ref": "#/definitions/tag"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "requestEntry": {
      "description": "Represents a request log entry - something that tracks the request at the application level.",
      "properties": {
        "applicationName": {
          "type": "string"
        },
        "body": {
          "type": "string"
        },
        "correlationId": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "machineName": {
          "type": "string"
        },
        "parent": {
          "type": "string"
        },
        "path": {
          "type": "string"
        },
        "requestId": {
          "type": "string"
        },
        "requestType": {
          "type": "string"
        },
        "sessionId": {
          "type": "string"
        },
        "sourceAddress": {
          "type": "string"
        },
        "timeStamp": {
          "format": "date-time",
          "type": "string"
        },
        "userName": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "responseEntry": {
      "description": "An entry to capture the response, or action, of a request.",
      "properties": {
        "applicationName": {
          "type": "string"
        },
        "build": {
          "type": "string"
        },
        "completed": {
          "format": "date-time",
          "type": "string"
        },
        "correlationId": {
          "type": "string"
        },
        "elapsed": {
          "example": "00:00:32",
          "type": "string"
        },
        "endPoint": {
          "type": "string"
        },
        "exception": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "isSuccessful": {
          "type": "boolean"
        },
        "machineName": {
          "type": "string"
        },
        "path": {
          "type": "string"
        },
        "requestId": {
          "type": "string"
        },
        "started": {
          "format": "date-time",
          "type": "string"
        },
        "timeStamp": {
          "format": "date-time",
          "type": "string"
        },
        "validationErrors": {
          "items": {
            "$ref": "#/definitions/validationError"
          },
          "type": "array"
        },
        "version": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "schema": {
      "description": "The Schema Object allows the definition of input and output data types. These types can be objects, but also primitives and arrays. This object is based on the JSON Schema Specification Draft 4 and uses a predefined subset of it. On top of this subset, there are extensions provided by this specification to allow for more complete documentation.",
      "properties": {
        "additionalProperties": null,
        "allOf": {
          "items": {
            "$ref": "#/definitions/schema"
          },
          "type": "array"
        },
        "default": null,
        "description": {
          "type": "string"
        },
        "discriminator": {
          "type": "string"
        },
        "enum": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "example": null,
        "exclusiveMaximum": {
          "type": "boolean"
        },
        "exclusiveMinimum": {
          "type": "boolean"
        },
        "extensions": {
          "type": "object"
        },
        "externalDocs": {
          "description": "Allows referencing an external resource for extended documentation.",
          "properties": {
            "description": {
              "type": "string"
            },
            "url": {
              "type": "string"
            }
          },
          "type": "object"
        },
        "format": {
          "type": "string"
        },
        "items": null,
        "maximum": {
          "format": "int32",
          "type": "integer"
        },
        "maxItems": {
          "format": "int32",
          "type": "integer"
        },
        "maxLength": {
          "format": "int32",
          "type": "integer"
        },
        "minimum": {
          "format": "int32",
          "type": "integer"
        },
        "minItems": {
          "format": "int32",
          "type": "integer"
        },
        "minLength": {
          "format": "int32",
          "type": "integer"
        },
        "minProperties": {
          "format": "int32",
          "type": "integer"
        },
        "multipleOf": {
          "format": "int32",
          "type": "integer"
        },
        "pattern": {
          "type": "string"
        },
        "properties": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "readOnly": {
          "type": "boolean"
        },
        "ref": {
          "type": "string"
        },
        "required": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "title": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "uniqueItems": {
          "type": "boolean"
        },
        "xml": {
          "description": "A metadata object that allows for more fine-tuned XML model definitions. When using arrays, XML element names are not inferred(for singular/plural forms) and the name property should be used to add that information.See examples for expected behavior.",
          "properties": {
            "attribute": {
              "type": "boolean"
            },
            "name": {
              "type": "string"
            },
            "namespace": {
              "type": "string"
            },
            "prefix": {
              "type": "string"
            },
            "wrapped": {
              "type": "boolean"
            }
          },
          "type": "object"
        }
      },
      "type": "object"
    },
    "schemaCollection": {
      "type": "object"
    },
    "stockProductCommand": {
      "properties": {
        "productId": {
          "type": "string"
        },
        "quantity": {
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "productId",
        "quantity"
      ],
      "type": "object"
    },
    "stockProductEvent": {
      "properties": {
        "productId": {
          "type": "string"
        },
        "quantity": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "tag": {
      "description": "Allows adding meta data to a single tag that is used by the Operation Object. It is not mandatory to have a Tag Object per tag used there.",
      "properties": {
        "description": {
          "type": "string"
        },
        "externalDocs": {
          "description": "Allows referencing an external resource for extended documentation.",
          "properties": {
            "description": {
              "type": "string"
            },
            "url": {
              "type": "string"
            }
          },
          "type": "object"
        },
        "name": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "validationError": {
      "description": "Represents a validation error and contains user facing messaging.",
      "properties": {
        "code": {
          "type": "string"
        },
        "message": {
          "type": "string"
        },
        "type": {
          "description": "Indicates the validation error type.",
          "enum": [
            "none",
            "input",
            "security",
            "business"
          ],
          "type": "string"
        }
      },
      "type": "object"
    },
    "validationType": {
      "description": "Indicates the validation error type.",
      "enum": [
        "none",
        "input",
        "security",
        "business"
      ],
      "type": "string"
    },
    "xml": {
      "description": "A metadata object that allows for more fine-tuned XML model definitions. When using arrays, XML element names are not inferred(for singular/plural forms) and the name property should be used to add that information.See examples for expected behavior.",
      "properties": {
        "attribute": {
          "type": "boolean"
        },
        "name": {
          "type": "string"
        },
        "namespace": {
          "type": "string"
        },
        "prefix": {
          "type": "string"
        },
        "wrapped": {
          "type": "boolean"
        }
      },
      "type": "object"
    }
  },
  "info": {
    "title": "Envio",
    "version": "1.0.0"
  },
  "paths": {
    "/_system/events": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "Gets the events that have occurred within the service context.",
        "operationId": "GET /_system/events",
        "parameters": [
          {
            "name": "End",
            "in": "query",
            "description": "The end of the requested range.",
            "required": false,
            "format": "date-time",
            "type": "string"
          },
          {
            "name": "Start",
            "in": "query",
            "description": "The start of the requested range.",
            "required": false,
            "format": "date-time",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "items": {
                "$ref": "#/definitions/eventEntry"
              },
              "type": "array"
            }
          }
        },
        "summary": "Get Events",
        "tags": [
          "Stacks"
        ]
      }
    },
    "/_system/health": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "Checks the health of the service and returns nothing if everything is good.  If there is an issue with the system health then\n            an exception is thrown.",
        "operationId": "GET /_system/health",
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "No content is returned from this endpoint."
          }
        },
        "summary": "Check Health",
        "tags": [
          "Stacks"
        ]
      }
    },
    "/_system/open-api": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "Gets the OpenAPI definition document.",
        "operationId": "GET /_system/open-api",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "This is the root document object for the API specification. It combines what previously was the Resource Listing and API Declaration (version 1.2 and earlier) together into one document.",
            "schema": {
              "$ref": "#/definitions/openApiDocument"
            }
          }
        },
        "summary": "Get OpenAPI Definition",
        "tags": [
          "Stacks"
        ]
      }
    },
    "/_system/requests": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "Gets requests that have happened in the service context.",
        "operationId": "GET /_system/requests",
        "parameters": [
          {
            "name": "End",
            "in": "query",
            "description": "The end of the requested range.",
            "required": false,
            "format": "date-time",
            "type": "string"
          },
          {
            "name": "Start",
            "in": "query",
            "description": "The start of the requested range.",
            "required": false,
            "format": "date-time",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "items": {
                "$ref": "#/definitions/requestEntry"
              },
              "type": "array"
            }
          }
        },
        "summary": "Get Requests",
        "tags": [
          "Stacks"
        ]
      }
    },
    "/_system/responses": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "Gets responses that have been provided in a service context.",
        "operationId": "GET /_system/responses",
        "parameters": [
          {
            "name": "End",
            "in": "query",
            "description": "The end of the requested range.",
            "required": false,
            "format": "date-time",
            "type": "string"
          },
          {
            "name": "Start",
            "in": "query",
            "description": "The start of the requested range.",
            "required": false,
            "format": "date-time",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "items": {
                "$ref": "#/definitions/responseEntry"
              },
              "type": "array"
            }
          }
        },
        "summary": "Get Responses",
        "tags": [
          "Stacks"
        ]
      }
    },
    "/catalog/products/add": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Adds a product to the product catalog.",
        "operationId": "POST /catalog/products/add",
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/addProductCommand"
            },
            "name": "body",
            "in": "body",
            "required": true
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "No content is returned from this endpoint."
          },
          "400": {
            "description": "1. Name is required.\r\n\r\n",
            "schema": {
              "items": {
                "$ref": "#/definitions/validationError"
              },
              "type": "array"
            }
          },
          "409": {
            "description": "1. Name must be unique.\r\n\r\n",
            "schema": {
              "items": {
                "$ref": "#/definitions/validationError"
              },
              "type": "array"
            }
          },
          "403": {
            "description": "User is employee.    \r\n",
            "schema": {
              "items": {
                "$ref": "#/definitions/validationError"
              },
              "type": "array"
            }
          }
        },
        "summary": "Add Product",
        "tags": [
          "Products"
        ]
      }
    },
    "/shipping/products/stock": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "operationId": "POST /shipping/products/stock",
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/stockProductCommand"
            },
            "name": "body",
            "in": "body",
            "required": true
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/stockProductEvent"
            }
          },
          "400": {
            "description": "1. ProductId must be specified.\r\n\r\n1. The product quantity must be greater than 0.\r\n\r\n",
            "schema": {
              "items": {
                "$ref": "#/definitions/validationError"
              },
              "type": "array"
            }
          }
        },
        "summary": "Stock Product",
        "tags": [
          "Products"
        ]
      }
    }
  },
  "schemes": [
    "https",
    "http"
  ],
  "swagger": "2.0",
  "tags": [
    {
      "description": "System defined endpoints.",
      "name": "Stacks"
    }
  ]
}